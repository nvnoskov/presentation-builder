// Code generated by hero.
// source: /home/strannik/www/presentation-builder/templates/edit.html
// DO NOT EDIT!
package template

import (
	"bytes"
	"fmt"
	"net/url"
	"nvnoskov/presentation-builder/models"

	"github.com/shiyanhui/hero"
)

//var val interface{}
//var ok bool

func isError(errors url.Values, key string) string {
	fmt.Printf("%+v %s \n", errors, key)
	if _, ok := errors[key]; ok {
		return "is-invalid"
	}
	return ""
}
func Edit(errors url.Values, presentation models.Presentation, buffer *bytes.Buffer) {
	buffer.WriteString(`<!doctype html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no">
    <meta name="description" content="">
    <title>Presentation builder</title>

    <!-- Bootstrap core CSS -->
    <link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/bootstrap/4.3.1/css/bootstrap.min.css" integrity="sha384-ggOyR0iXCbMQv3Xipma34MD+dH/1fQ784/j6cY/iJTQUOhcWr7x9JvoRxT2MZw1T" crossorigin="anonymous">
    <link rel="stylesheet" href="/static/style.css">
   
  </head>
  <body>
        <nav class="navbar navbar-expand-md navbar-dark fixed-top bg-dark">
                <a class="navbar-brand" href="/">Presentation builder</a>
                <button class="navbar-toggler" type="button" data-toggle="collapse" data-target="#navbarCollapse" aria-controls="navbarCollapse" aria-expanded="false" aria-label="Toggle navigation">
                  <span class="navbar-toggler-icon"></span>
                </button>
                <div class="collapse navbar-collapse" id="navbarCollapse">
                  <ul class="navbar-nav mr-auto">
                    <li class="nav-item active">
                      <a class="nav-link" href="/">Home</a>
                    </li>
                    <li class="nav-item">
                        <a class="nav-link" href="/presentations">My presentations</a>
                    </li>                    
                    <li class="nav-item">
                      <a class="nav-link" href="/upload">New upload</a>
                    </li>                    
                  </ul>
                  
                </div>
              </nav>
              
              <main role="main" class="container">
        `)
	buffer.WriteString(`
<form  method="POST" enctype="application/x-www-form-urlencoded">
    <h1 class="h3 mb-3 font-weight-normal">Add information about your presentation</h1>
    
    <div class="form-group row">
        <label for="name" class="col-sm-2 col-form-label">Name</label>
        <div class="col-sm-10">
            <input type="text" class="form-control `)
	hero.EscapeHTML(isError(errors, "name"), buffer)
	buffer.WriteString(`" id="name" name="name" value="`)
	hero.EscapeHTML(presentation.Name, buffer)
	buffer.WriteString(`">
            `)
	if val, ok := errors["name"]; ok {

		buffer.WriteString(`
            <div class="invalid-feedback">
                `)
		hero.EscapeHTML(fmt.Sprintf("%v", val[0]), buffer)
		buffer.WriteString(`
            </div>
            `)
	}
	buffer.WriteString(`
        </div>
       
        
    </div>
    <div class="form-group row">
        <label for="author" class="col-sm-2 col-form-label">Author</label>
        <div class="col-sm-10">
            <input type="text" class="form-control `)
	hero.EscapeHTML(isError(errors, "author"), buffer)
	buffer.WriteString(`" id="author" placeholder="Author" name="author" value="`)
	hero.EscapeHTML(fmt.Sprintf("%v", presentation.Author), buffer)
	buffer.WriteString(`">
            `)
	if val, ok := errors["author"]; ok {

		buffer.WriteString(`
                <div class="invalid-feedback">
                    `)
		hero.EscapeHTML(fmt.Sprintf("%v", val[0]), buffer)
		buffer.WriteString(`
                </div>
                `)
	}
	buffer.WriteString(`
        </div>
    </div>
    <div class="form-group row">
        <label for="description" class="col-sm-2 col-form-label">Description</label>
        <div class="col-sm-10">
        <textarea class="form-control `)
	hero.EscapeHTML(isError(errors, "description"), buffer)
	buffer.WriteString(`" id="description" rows="3" name="description">`)
	hero.EscapeHTML(fmt.Sprintf("%v", presentation.Description), buffer)
	buffer.WriteString(`</textarea>
        `)
	if val, ok := errors["description"]; ok {

		buffer.WriteString(`
            <div class="invalid-feedback">
                `)
		hero.EscapeHTML(fmt.Sprintf("%v", val[0]), buffer)
		buffer.WriteString(`
            </div>
            `)
	}
	buffer.WriteString(`
    </div>
    </div>
    <button class="btn btn-lg btn-primary" type="submit">Save</button>
    <p class="mt-5 mb-3 text-muted">&copy; 2017-2019</p>
</form>
`)

	buffer.WriteString(`
        </main>
    <script src="https://code.jquery.com/jquery-3.3.1.slim.min.js" integrity="sha384-q8i/X+965DzO0rT7abK41JStQIAqVgRVzpbzo5smXKp4YfRvH+8abtTE1Pi6jizo" crossorigin="anonymous"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.14.7/umd/popper.min.js" integrity="sha384-UO2eT0CpHqdSJQ6hJty5KVphtPhzWj9WO1clHTMGa3JDZwrnQq4sF86dIHNDz0W1" crossorigin="anonymous"></script>
    <script src="https://stackpath.bootstrapcdn.com/bootstrap/4.3.1/js/bootstrap.min.js" integrity="sha384-JjSmVgyd0p3pXB1rRibZUAYoIIy6OrQ6VrjIEaFf/nJGzIxFDsf4x0xIM+B07jRM" crossorigin="anonymous"></script>
</body>
</html>
`)

}
